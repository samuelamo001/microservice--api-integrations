services:
  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: gateway-service
    ports:
      - "8020:8020"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - PRODUCT_SERVICE_URL=http://product-service:8050
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8020/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    depends_on:
      product-service:
        condition: service_healthy

  product-service:
    container_name: product-service
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "8050:8050"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db-products:5432/microservice_products
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=deeplearning
      - GATEWAY_SERVICE_URL=http://gateway-service:8020
    depends_on:
      db-products:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8050/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  order-service:
    container_name: order-service
    build:
      context: ./order-service
      dockerfile: Dockerfile
    ports:
      - "8030:8030"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db-orders:5432/microservice_ordered_products
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=deeplearning
      - PRODUCT_SERVICE_URL=http://product-service:8050
    depends_on:
      product-service:
        condition: service_healthy
      db-orders:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8030/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  shipping-service:
    container_name: shipping-service
    build:
      context: ./shipping-service
      dockerfile: Dockerfile
    ports:
      - "8040:8040"
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db-shipping:5432/microservice_shipped_products
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=deeplearning
      - ORDER_SERVICE_URL=http://order-service:8030
    depends_on:
      order-service:
        condition: service_healthy
      db-shipping:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8040/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  db-products:
    image: postgres:14
    container_name: db-products
    environment:
      POSTGRES_DB: products
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: deeplearning
    ports:
      - "5432:5432"
    volumes:
      - products-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  db-orders:
    image: postgres:14
    container_name: db-orders
    environment:
      POSTGRES_DB: orders
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: deeplearning
    ports:
      - "5433:5432"
    volumes:
      - orders-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  db-shipping:
    image: postgres:14
    container_name: db-shipping
    environment:
      POSTGRES_DB: shipping
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: deeplearning
    ports:
      - "5434:5432"
    volumes:
      - shipping-data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  products-data:
  orders-data:
  shipping-data:

networks:
  app-network:
    driver: bridge
